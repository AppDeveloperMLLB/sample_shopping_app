import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:sample_shopping_app/src/features/cart/application/cart_application_service.dart';
import 'package:sample_shopping_app/src/features/cart/application/product_in_cart.dart';
import 'package:sample_shopping_app/src/features/cart/domain/repository/cart_repository.dart';
import 'package:sample_shopping_app/src/features/product_list/domain/model/product.dart';
import 'package:sample_shopping_app/src/locator/repository_locator.dart';

final deliveryCardControllerProvider = AsyncNotifierProvider<AuthController, void>(() {
  return AuthController();
});

class AuthController extends AsyncNotifier<void> {
  // 3. override the [build] method to return a [FutureOr]
  @override
  FutureOr<void> build() {
    // 4. return a value (or do nothing if the return type is void)
  }

  Future<void> signInAnonymously() async {
    // 5. read the repository using ref
    final authRepository = ref.read(authRepositoryProvider);
    // 6. set the loading state
    state = const AsyncLoading();
    // 7. sign in and update the state (data or error)
    state = await AsyncValue.guard(authRepository.signInAnonymously);
  }
}

final deliveryCardControllerProvider =
    StateNotifierProvider<ShoppingCartPageControllerProvider, AsyncValue<void>>(
        (ref) {
  return ShoppingCartPageControllerProvider();
});

class ShoppingCartPageControllerProvider
    extends StateNotifier<AsyncValue<void>> {
  ShoppingCartPageControllerProvider() : super(const AsyncData(null));

  StreamProvider<List<ProductInCart>> getProductListStreamInCart() {
    final cartApplicationService = CartApplicationService();
    return cartApplicationService.watchCart();
  }

  Future<void> delete(String productId) async {
    final service = CartApplicationService();
    state = await AsyncValue.guard(() => service.delete(productId));
  }

  Future<void> increment(String productId) async {
    state = const AsyncLoading();
    final service = CartApplicationService();
    state = await AsyncValue.guard(() => service.increment(productId));
  }

  Future<void> decrement(String productId) async {
    state = const AsyncLoading();
    final service = CartApplicationService();
    state = await AsyncValue.guard(() => service.decrement(productId));
  }

  Future<void> order() async {
    state = const AsyncLoading();
    final service = CartApplicationService();
    state = await AsyncValue.guard(() => service.order());
  }
}
